#ifndef __DLL__
#define __DLL__
typedef struct node_{
	struct node_ *right;
	struct node_ *left;
}node_t;

typedef struct list_{
	node_t *head;
	unsigned int offset;
}list_t;

void add_node(list_t *lst, node_t *node);
void remove_node(list_t *lst, node_t *node);
void init_list(list_t *lst, unsigned int offest);

#define ITERATE_LIST_BEGIN(lstptr,struct_type,ptr){\
	node_t *_next=NULL, *_node = NULL;\
	for(_node = lstptr->head; _node; _node = _next){\
	      _next = _node->right;\
		ptr = (struct_type *)((char *)_node-lstptr->offset);
#define ITERATE_LIST_END }}

#define REMOVE_NODE(lstptr, struct_type, ptr){\
	ptr = (struct_type *)((char *)ptr - lstptr->offset); \
	printf("helloname:%s",ptr->name);}
#if 0
	node_t *_next = NULL, *_node = NULL;\
	struct_type *_curr = NULL;\
	for(_node = lstptr->head; _node; _node = _next){\
		_curr = (struct_type *)((char *)_node - lstptr->offset);\
		if(ptr == _curr){\
			ptr->right->left = ptr->left;\
			ptr->left->right = ptr->right;\
			free(ptr);\
			break;\
		}\
		_next = _node->right;\
	}}

#endif

#define node_init(node)\
	node->left = node->right = NULL;

#define offsetof(struct_type, member)\
	((unsigned int)&((struct_type *)0)->member)
#endif
